<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on 동주의 세상</title>
    <link>https://jutopia.net/algorithm/</link>
    <description>Recent content in Algorithms on 동주의 세상</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright notice</copyright>
    <lastBuildDate>Thu, 18 Aug 2022 15:11:41 +0900</lastBuildDate><atom:link href="https://jutopia.net/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode 2196 Create Binary Tree From Descriptions 파이썬 풀이 해설</title>
      <link>https://jutopia.net/algorithm/lc2196/</link>
      <pubDate>Thu, 18 Aug 2022 15:11:41 +0900</pubDate>
      
      <guid>https://jutopia.net/algorithm/lc2196/</guid>
      <description>LeetCode 2196 Create Binary Tree From Descriptions
접근  map의 key에 node.val, value에 node reference 가 담긴다.</description>
    </item>
    
    <item>
      <title>LeetCode 1722 Minimize Hamming Distance After Swap Operations 파이썬 해설 풀이</title>
      <link>https://jutopia.net/algorithm/lc1722/</link>
      <pubDate>Mon, 08 Aug 2022 13:40:45 +0900</pubDate>
      
      <guid>https://jutopia.net/algorithm/lc1722/</guid>
      <description>LeetCode 1722 Minimize Hamming Distance After Swap Operations
접근  연결되어 있는 인덱스 정보를 담을 그래프 graph, 방문 여부 visited 를 초기화한다.</description>
    </item>
    
    <item>
      <title>LeetCode 1011, Capacity To Ship Packages Within D Days 파이썬 풀이 해설</title>
      <link>https://jutopia.net/algorithm/lc1011/</link>
      <pubDate>Wed, 03 Aug 2022 10:43:23 +0900</pubDate>
      
      <guid>https://jutopia.net/algorithm/lc1011/</guid>
      <description>LeetCode 1011, Capacity To Ship Packages Within D Days
접근  binary-search 로 적절한 배의 weight 용량을 찾는다.</description>
    </item>
    
    <item>
      <title>백준 9935 문자열 폭발 파이썬 풀이 해설</title>
      <link>https://jutopia.net/algorithm/boj9935/</link>
      <pubDate>Mon, 01 Aug 2022 16:17:41 +0900</pubDate>
      
      <guid>https://jutopia.net/algorithm/boj9935/</guid>
      <description>접근
 주어진 문자열의 각 문자를 결과 문자열(ans)에 추가한다. 만약 ans[-1] 이 폭발 문자열의 마지막 bomb[-1] 과 같다면 ans[-len(bomb):] 과 bomb[:] 을 비교하여 같으면 폭발시킨다.</description>
    </item>
    
    <item>
      <title>LeetCode 1146, Snapshot Array 파이썬, 풀이, 해설</title>
      <link>https://jutopia.net/algorithm/lc1146/</link>
      <pubDate>Fri, 29 Jul 2022 14:53:14 +0900</pubDate>
      
      <guid>https://jutopia.net/algorithm/lc1146/</guid>
      <description>LeetCode 1146, Snapshot Array
접근  length 로 2차원 배열(arr)을 초기화한다. snap_id 를 기억하는 변수를 지정한다.</description>
    </item>
    
    <item>
      <title>LeetCode 981, Time Based Key-Value Store 파이썬, 풀이, 해설</title>
      <link>https://jutopia.net/algorithm/lc981/</link>
      <pubDate>Thu, 28 Jul 2022 09:35:29 +0900</pubDate>
      
      <guid>https://jutopia.net/algorithm/lc981/</guid>
      <description>접근  dictionary 에 키에 해당하는 리스트를 만들고 오름차순의 input 을 받는다. get 부를때 해당 키의 리스트에서 binary search 로 최댓값을 찾는다.</description>
    </item>
    
    <item>
      <title>LeetCode 1870, Minimum Speed to Arrive on Time 파이썬, 해설, 풀이</title>
      <link>https://jutopia.net/algorithm/lc1870/</link>
      <pubDate>Wed, 27 Jul 2022 11:04:15 +0900</pubDate>
      
      <guid>https://jutopia.net/algorithm/lc1870/</guid>
      <description>접근  가능한 속도 1 과 10^7 사이에서 binary search 로 최소 속도를 찾는다. 각 속도마다 train list 를 돌며 걸리는 시간을 계산에서 binary search range 를 조정한다.</description>
    </item>
    
    <item>
      <title>LeetCode 167,Two Sum II - Input Array Is Sorted 파이썬 해설 풀이</title>
      <link>https://jutopia.net/algorithm/lc167/</link>
      <pubDate>Tue, 26 Jul 2022 15:04:19 +0900</pubDate>
      
      <guid>https://jutopia.net/algorithm/lc167/</guid>
      <description>접근  정렬되어 있는 array 의 처음과 끝에 포인터를 둔다. target 과 비교하며 포인터를 움직인다.  사고 정렬되어 있고, 답이 하나로 보장되어 있다길래 two pointer 썼다.</description>
    </item>
    
    <item>
      <title>LeetCode 302. Range Sum Query 2D - Immutable 파이썬, 해설, 풀이</title>
      <link>https://jutopia.net/algorithm/lc304/</link>
      <pubDate>Fri, 29 Oct 2021 21:46:22 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/lc304/</guid>
      <description>사고 같은 크기의 matrix 에 0, 0 부터 현재 index 까지 만들어지는 사각형 sum 을 저장하는 방식이 쉬우면서도 효율적인 접근이다.</description>
    </item>
    
    <item>
      <title>LeetCode 96. Unique Binary Search Trees 파이썬, 해설, 풀이</title>
      <link>https://jutopia.net/algorithm/lc96/</link>
      <pubDate>Sun, 24 Oct 2021 21:46:22 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/lc96/</guid>
      <description>접근  전체 node 가 head를 제외하고 n개일 때 head 에서 왼쪽에 k, 오른쪽에 n-k 만큼의 node를 갖는 경우의 수는 dp[k] * dp[n - k] 이다.</description>
    </item>
    
    <item>
      <title>LeetCode 139. Work Break 파이썬, 풀이, 해설</title>
      <link>https://jutopia.net/algorithm/lc139/</link>
      <pubDate>Fri, 22 Oct 2021 12:59:56 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/lc139/</guid>
      <description>접근  dp 는 s의 현재 index를 단어의 끝으로 가장 길게 완성할 수 있는 시작 index를 가리킨다.</description>
    </item>
    
    <item>
      <title>LeetCode 1567. Maximum Length of Subarray with Positive Product 해설, 풀이, 파이썬</title>
      <link>https://jutopia.net/algorithm/lc1567/</link>
      <pubDate>Fri, 15 Oct 2021 18:28:22 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/lc1567/</guid>
      <description>접근  linear 로 훝으며 모든 값을 곱하며 진행한다. 메모리 절약을 위해 부호만 기록한다. 각 index 에서 여태의 곱연산 부호에 따라 조건부로 최대 부분 수열 길이를 갱신한다.</description>
    </item>
    
    <item>
      <title>LeetCode 45. Jump Game II 풀이, 해설, 파이썬</title>
      <link>https://jutopia.net/algorithm/lc45/</link>
      <pubDate>Thu, 14 Oct 2021 17:03:10 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/lc45/</guid>
      <description>접근  현재 pointer 와 닿을 수 있는 최대 거리인 reach, 점프 횟수 카운트, 새로운 reach 후보 변수인 temp 네 가지 변수를 이용한다.</description>
    </item>
    
    <item>
      <title>LeetCode 55. Jump Game 풀이, 해설, 파이썬</title>
      <link>https://jutopia.net/algorithm/lc55/</link>
      <pubDate>Wed, 13 Oct 2021 20:18:42 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/lc55/</guid>
      <description>접근  현재 pointer 와 닿을 수 있는 최대 거리인 reach 두 변수를 이용한다. 닿는 index 중 가장 멀리까지 갈 수 있는 reach 로 계속해서 업데이트 한다.</description>
    </item>
    
    <item>
      <title>LeetCode 213. House Robber II 풀이, 해설, 파이썬</title>
      <link>https://jutopia.net/algorithm/lc213/</link>
      <pubDate>Tue, 12 Oct 2021 18:52:54 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/lc213/</guid>
      <description>접근  처음과 마지막이 접하기 때문에 House Robber I 과 다른 방식을 생각해야한다. 첫번째 집을 털면 마지막 집은 고려할 필요가 없다.</description>
    </item>
    
    <item>
      <title>백준 2143 두 배열의 합 - 파이썬</title>
      <link>https://jutopia.net/algorithm/boj2143/</link>
      <pubDate>Sat, 26 Jun 2021 19:54:19 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/boj2143/</guid>
      <description>접근, 사고 확실히 푼 문제 수가 쌓일수록 유형별로 나눠서 생각하기가 수월한것 같다.
이 유형의 베이스는 Two Sum 이다 (무려 리트코드의 첫번째 문제!</description>
    </item>
    
    <item>
      <title>백준 10942 팰린드롬? - 파이썬</title>
      <link>https://jutopia.net/algorithm/boj10942/</link>
      <pubDate>Sat, 26 Jun 2021 15:46:18 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/boj10942/</guid>
      <description>접근  s 와 e 를 받아서 2차원 배열로 각각의 질문에 O(1) 에 답하는 것이 목표이다.</description>
    </item>
    
    <item>
      <title>LeetCode 33 - Search in rotated sorted array 풀이, 해설, 파이썬</title>
      <link>https://jutopia.net/algorithm/lc33/</link>
      <pubDate>Wed, 23 Jun 2021 14:22:28 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/lc33/</guid>
      <description>접근  기본적인 배경은 이분 탐색이다. 현재 pivot 기준으로 왼쪽을 봐야할지, 오른쪽을 봐야할지 조건을 생각하는 것이 관건이다.</description>
    </item>
    
    <item>
      <title>백준 2616 소형기관차 - 파이썬</title>
      <link>https://jutopia.net/algorithm/boj2616/</link>
      <pubDate>Wed, 16 Jun 2021 17:16:53 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/boj2616/</guid>
      <description>접근  열 길이가 기차의 수 + 1이고, 행 길이가 3인 dp 행렬로 접근한다. 1~3번째 행은 각각 현재 인덱스에서 1~3번째 열차가 골라졌다면 실을 수 있는 최대 손님의 수다.</description>
    </item>
    
    <item>
      <title>백준 16724 피리 부는 사나이, 파이썬</title>
      <link>https://jutopia.net/algorithm/boj16724/</link>
      <pubDate>Sat, 12 Jun 2021 20:12:20 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/boj16724/</guid>
      <description>접근  방문 기록을 리스트로 기억한다. DFS 에 현재 탐색 중인 좌표들이 담긴 큐와 현재 위치를 인자로 받는다.</description>
    </item>
    
    <item>
      <title>백준 1766 문제집 파이썬</title>
      <link>https://jutopia.net/algorithm/boj1766/</link>
      <pubDate>Thu, 10 Jun 2021 15:02:48 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/boj1766/</guid>
      <description>접근 위상 정렬을 이용해 현재 접근 가능한 수 중 가장 작은 값을 출력한다
 N 사이즈의 풀 수 있는 다음 문제가 담긴 2차원 리스트, 접근하기 위해 풀어야 하는 선행 문제의 갯수가 담긴 int 리스트를 선언한다.</description>
    </item>
    
    <item>
      <title>백준 1958 LCS3 파이썬</title>
      <link>https://jutopia.net/algorithm/boj1958/</link>
      <pubDate>Thu, 10 Jun 2021 13:02:36 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/boj1958/</guid>
      <description>접근 처음 두 줄의 LCS 를 찾고, 그 결과와 마지막 줄의 LCS 를 찾는 순차적인 방법으로도 가능하다.</description>
    </item>
    
    <item>
      <title>백준 9466 텀 프로젝트 파이썬</title>
      <link>https://jutopia.net/algorithm/boj9466/</link>
      <pubDate>Wed, 09 Jun 2021 11:26:32 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/boj9466/</guid>
      <description>접근 dfs로 탐색을 하다 탐색한 부분이 다시 발견되면 cycle 이 성립한다. directed-graph 이기에 가능한 성질이다.</description>
    </item>
    
    <item>
      <title>백준 1806 부분합 파이썬</title>
      <link>https://jutopia.net/algorithm/boj1806/</link>
      <pubDate>Wed, 09 Jun 2021 09:55:01 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/boj1806/</guid>
      <description>접근
 정해진 길이가 없기에 사이즈가 자유로운 윈도우 사이즈로 수열을 탐색한다. 앞의 포인터를 post, 뒤를 pre라 할때 윈도우의 합이 S 보다 커질때까지 post가 앞으로 움직인다.</description>
    </item>
    
    <item>
      <title>백준 1005 해설 파이썬</title>
      <link>https://jutopia.net/algorithm/boj1105/</link>
      <pubDate>Tue, 08 Jun 2021 19:59:19 -0700</pubDate>
      
      <guid>https://jutopia.net/algorithm/boj1105/</guid>
      <description>solved.ac class 5의 essential 문제로, 위상 정렬에 대한 이해가 있다면 어렵지 않게 풀수 있다.
위상 정렬에 대해서는 따로 알고리즘 포스팅에 정리해놓겠다.</description>
    </item>
    
  </channel>
</rss>
